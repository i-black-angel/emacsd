;; set user info as your first step
(setq user-full-name "Shusheng Shao")
(setq user-mail-address "iblackangel@163.com")

;; -------- Start: Global key bindings -----------------------------------
;; 
;; Define functions
;; 
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
	((looking-at "\\s\)") (forward-char 1) (backward-list 1))
	(t (self-insert-command (or arg 1)))))

(defun zl-newline nil
  "open new line belowe current line"
  (interactive)
  (end-of-line)
  (newline))

(defun ol-newline nil
  "open new line upon current line"
  (interactive)
  (move-beginning-of-line 1)
  (open-line 1)
)

(defun  kid-gccrec()
   (interactive)
   (tooltip-show
    (shell-command-to-string
     (concat "gccrec g++-code-assist -c "
	     "-pipe -O2 -Wall -W -D_REENTRANT "
	     "-DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED"
     	    "-I/usr/share/qt4/mkspecs/linux-g++ "
     	    "-I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui "
     	    "-I/usr/include/qt4 -I. -I. " (buffer-file-name)))))

(defun sdcv-to-buffer ()
  (interactive)
  (let ((word (if mark-active
		  (buffer-substring-no-properties (region-beginning) (region-end))
		(current-word nil t))))
    (setq word (read-string (format "Search the dictionary for (default %s): " word)
			    nil nil word))
    (set-buffer (get-buffer-create "*sdcv*"))
    (buffer-disable-undo)
    (erase-buffer)
    (let ((process (start-process-shell-command "sdcv" "*sdcv*" "sdcv" "-n" word)))
      (set-process-sentinel
       process
       (lambda (process signal)
	 (when (memq (process-status process) '(exit signal))
	   (unless (string= (buffer-name) "*sdcv*")
	     (setq kid-sdcv-window-configuration (current-window-configuration))
	     (switch-to-buffer-other-window "*sdcv*")
	     (local-set-key (kbd "d") 'kid-sdcv-to-buffer)
	     (local-set-key (kbd "q") (lambda ()
					(interactive)
					(bury-buffer)
					(unless (null (cdr (window-list))) ; only one window
					  (delete-window)))))
	   (goto-char (point-min))))))))

(defun open-config-file()
  (interactive)
  (find-file "~/.emacs"))

(defun reload-dotemacs-file()
  (interactive)
  (load-file "~/.emacs"))

(defun kill-to-front()
  (interactive)
  (kill-region (point) 
	       (progn (move-beginning-of-line 1) (point))))

;; 
;; Key Bindings
;; 
;; (global-set-key (kbd "C-SPC") 'nil)
(global-set-key (kbd "C-,") 'set-mark-command)
(global-set-key (kbd "C-c m") 'set-mark-command)
(global-set-key (kbd "C-c d") 'sdcv-to-buffer)
(global-set-key "\C-x\C-b" 'electric-buffer-list)
(global-set-key [C-return] 'zl-newline)	;绑定Ctrl-回车
(global-set-key "\C-o" 'ol-newline)
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-u" 'kill-to-front)
(global-set-key "\M-]" 'universal-argument)
(global-set-key (kbd "M-<left>") 'previous-buffer)
(global-set-key (kbd "M-<right>") 'next-buffer)
(global-set-key (kbd "M-o") 'other-window)
;; (global-set-key "%" 'match-paren)

;; refer to this site:
;; http://ocean.stanford.edu/research/quick_emacs.html
(keyboard-translate ?\C-h ?\C-?)	; translate `C-h` to DEL
(keyboard-translate ?\C-? ?\C-h)	; translate DEL to `C-h`.
(global-set-key [?\C-h] 'delete-backward-char)
;; (global-set-key [?\C-x ?h] 'help-command)
;; ======== End: Global key bindings =====================================


;; -------- Start: Performence Settings ----------------------------------
(fset 'yes-or-no-p 'y-or-n-p)		; 以y/n代替yes/no
(display-time-mode t)			; Show Time
(setq display-time-day-and-date t)	; Display Day & Date
(setq display-time t)			; Display Time
(setq mouse-yank-at-point t)
(global-linum-mode t)
(tool-bar-mode -1)
(setq-default make-backup-files nil)  ; No backup file (*.*~)
(setq auto-save-default nil)          ; do not auto save
(setq backup-inhibited t)	      ; backup-inhibited
(setq-default major-mode 'text-mode)
;; display line-num && column-num
(setq column-number-mode t)
(setq line-number-mode t)

;; Change the title, display buffer's name
(setq frame-title-format "%f")
;; (setq-default cursor-type 'bar)		; 光标设置成竖线
(electric-pair-mode t)

;; Misc
(show-paren-mode t)
(setq show-paren-style 'parenthesis)
(prefer-coding-system 'chinese-gbk)
(prefer-coding-system 'utf-8)
(transient-mark-mode t)			;允许临时设置标记
(setq x-select-enable-clipboard t)	;支持 emacs 和外部程序的粘贴

;; scroll one line at a time (less "jumpy" than defaults)
(scroll-bar-mode -1)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed -1) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1
      scroll-conservatively 10000) ;; keyboard scroll one line at a time

;; org-mode truncate-lines
(add-hook 'org-mode-hook 
	  (lambda () (setq truncate-lines nil)))

;; ======== End: Performence Settings ====================================


;; ---------- begin: mode -----------------------------------
(add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.rc$" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.pro$" . makefile-mode))
(add-to-list 'auto-mode-alist '("\\.mak$" . makefile-mode))
(add-to-list 'auto-mode-alist '("\\.m4$" . autoconf-mode))
(add-to-list 'auto-mode-alist '("\\.bat$" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.qml$" . css-mode))
;; =========== end: mode ======================================

(defun my-emacs-lisp-mode-hook()
  (define-key emacs-lisp-mode-map [f7] 'eval-buffer)
  (define-key emacs-lisp-mode-map [(return)] 'newline-and-indent))
(add-hook 'emacs-lisp-mode-hook 'my-emacs-lisp-mode-hook)

;; -------- Begin: 我的C/C++语言编辑策略 ---------------------------------
(setq gdb-many-windows t)

;; using 'g++ -v file.cpp' to find out the search path
(defun my-c-mode-common-hook()
  (setq ff-search-directories
	'("."
	  "/usr/include"
	  "/usr/include/x86_64-linux-gnu"
	  "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed"
	  "/usr/local/include"
	  "/usr/lib/gcc/x86_64-linux-gnu/4.8/include"
	  "/usr/include/c++/4.8/backward"
	  "/usr/include/x86_64-linux-gnu/c++/4.8"
	  "/usr/include/c++/4.8"
	  "../include"
	  "../src"
	  "../source"))
  (setq tab-width 4 indent-tabs-mode -1)
  (c-set-style "stroustrup")

  (define-key c-mode-base-map [(return)] 'newline-and-indent)
  (define-key c-mode-base-map [(f3)] 'ff-get-other-file)
  (define-key c-mode-base-map [(f4)] 'ff-find-other-file)
  ;; for debug
  (define-key c-mode-base-map [(f5)] 'gud-go)
  (define-key c-mode-base-map [(f7)] 'compile)
  (define-key c-mode-base-map [(f8)] 'gud-finish)
  (define-key c-mode-base-map [(f9)] 'gud-break)
  ;; (define-key c-mode-base-map [(f10)] 'gud-step)
  (define-key c-mode-base-map [(f11)] 'gud-step)
  ;; (define-key c-mode-base-map [(f11)] 'gud-next)
  (define-key c-mode-base-map [(f12)] 'gdb-restore-windows)
  (define-key c-mode-base-map [(meta \`)] 'c-indent-command)
  ;;预处理设置
  ;; (setq c-macro-shrink-window-flag t)
  ;; (setq c-progress-interval nil)
)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)


;; 安装 abbrev
(mapc
 (lambda (mode)
   (define-abbrev-table mode '(
                               ("inc" "" skeleton-include 1)
                               )))
 '(c-mode-abbrev-table c++-mode-abbrev-table))

;; 输入 inc , 可以自动提示输入文件名称,可以自动补全.
(define-skeleton skeleton-include
  "generate include<>" ""
  > "#include <"
  (completing-read "Include File:"
                   (mapcar #'(lambda (f) (list f ))
                           (apply 'append
                                  (mapcar
                                   #'(lambda (dir)
                                       (directory-files dir))
                                   (list "/usr/include"
                                         "/usr/local/include"
					 "/usr/include/x86_64-linux-gnu/c++/4.8"
					 "/usr/include/c++/4.8/backward"
					 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include"
					 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed"
					 "/usr/include/x86_64-linux-gnu"
                                         "/usr/include/c++/4.8.4")))))
  ">")
;; ======== End: C program strategy ======================================

;; -------- Begin: 我的C++语言编辑策略 -----------------------------------
(defun my-c++-mode-hook()
  (setq tab-width 4 indent-tabs-mode -1)
  (c-set-style "stroustrup")
;;  (define-key c++-mode-map [f3] 'replace-regexp)
)
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
;; ======== End: C++ Program Strategy ====================================

;; GDB
(add-hook 'gdb-mode-hook 'gud-tooltip-mode)
(add-hook 'gdb-mode-hook 'tool-bar-mode)

;; -------- Begin: makefile-mode --------------------------------------
(defun my-makefile-mode-hook()
  (define-key makefile-mode-map [(f7)] 'compile)
)
(add-hook 'makefile-mode-hook 'my-makefile-mode-hook)
;; ======= End: Makefile Strategy ====================================

;; -------- Begin: Load Files --------------------------------------------
(add-to-list 'load-path "~/.emacs.d/plugins")

;; Using graphviz in emacs
(load-file "~/.emacs.d/plugins/graphviz-dot-mode.el")

;; Yet Another Snippet (yasnippet)
(add-to-list 'load-path
	     "~/.emacs.d/plugins/yasnippet-0.6.1c")
(require 'yasnippet)
(setq yas/root-directory "~/.emacs.d/snippets")
(setq yas/use-menu 'abbreviate)
(yas/load-directory yas/root-directory)
(yas/global-mode 1)

(require 'color-theme)
(color-theme-initialize)
(color-theme-pok-wog)
(require 'doxymacs)
(add-hook 'c-mode-common-hook 'doxymacs-mode)
(defun my-doxymacs-font-lock-hook ()
  (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
      (doxymacs-font-lock)))
(add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)

(require 'col-highlight)
;; xcscope.el
;; This is a cscope interface for (X)Emacs
;; It currently runs under Unix-like os only
;;
;; If you wanna use xcscope.el script, install "cscope" first,
;; for Ubuntu distrabution:
;;
;;     $ sudo apt-get install cscope cscope-el
;;
;; Uncomment below lines to enable xcscope.
;; (add-hook 'c-mode-common-hook
;; 	  '(lambda()
;; 	     (require 'xcscope)))

;; (defun my-find-tag(&optional prefix)
;;   "union of `find-tag' alternatives. decides upon major-mode"
;;   (interactive "P")
;;   (if (and (boundp 'cscope-minor-mode)
;; 	   cscope-minor-mode)
;;       (progn
;; 	(ring-insert find-tag-marker-ring (point-marker))
;; 	(call-interactively
;; 	 (if prefix
;; 	     'cscope-find-this-symbol
;; 	   'cscope-find-global-definition-no-prompting)))
;;     (call-interactively 'find-tag)))
;; (substitute-key-definition 'find-tag 'my-find-tag global-map)

;; -------------------------------
;; Load fvwm-mode on Emacs startup
;; -------------------------------
;; (require 'fvwm-mode)
;; (add-hook 'fvwm-mode-hook
;; 	  '(lambda()
;; 	     (font-lock-mode t)
;; 	     (setq font-lock-keywords fvwm-font-lock-keywords)
;; 	     (font-lock-fontify-buffer)))

;; Auto-Complete-Mode
(require 'auto-complete-config)
;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/plugins/ac-dict")
(ac-config-default)
(define-key ac-completing-map (kbd "C-n") 'ac-next)
(define-key ac-completing-map (kbd "C-p") 'ac-previous)

;; enable window-numbering-mode
(require 'window-numbering)
(window-numbering-mode t)

;; smex
(require 'smex)
(global-set-key [(meta x)] (lambda ()
			     (interactive)
			     (or (boundp 'smex-cache)
				 (smex-initialize))
			     (global-set-key [(meta x)] 'smex)
			     (smex)))
(global-set-key [(shift meta x)] (lambda ()
				   (interactive)
				   (or (boundp 'smex-cache)
				       (smex-initialize))
				   (global-set-key [(shift meta x)] 'smex-major-mode-commands)
				   (smex-major-mode-commands)))

;; (require 'sr-speedbar)
;; (global-set-key (kbd "s-b") 'sr-speedbar-toggle)
;; (setq speedbar-show-unknown-files t)

(defun local-speedbar-mode-hook()
  (define-key speedbar-mode-map (kbd "u") 'speedbar-up-directory))
(add-hook 'speedbar-mode-hook 'local-speedbar-mode-hook)

;; tabbar
;; (require 'tabbar)
;; (tabbar-mode t)
;; (global-set-key (kbd "C-<next>") 'tabbar-forward)
;; (global-set-key (kbd "C-<prior>") 'tabbar-backward)

;; (set-face-attribute 'tabbar-default nil
;; 		    :family "Bitstream Vera Sans Mono"
;; 		    :background "#293739"
;; 		    :foreground "#f8f8f0"
;; 		    :height 1.0)
;; (set-face-attribute 'tabbar-unselected nil
;; 		    :inherit 'tabbar-default
;;                     :box '(:style released-button))
;; (set-face-attribute 'tabbar-selected nil
;; 		    :inherit 'tabbar-default
;; 		    :foreground "#f8f8f0"
;; 		    :bold t
;; 		    :box '(:style pressed-button))

;; load ggtags package
(require 'ggtags)
(add-hook 'c-mode-common-hook (lambda ()
				(when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
				  (ggtags-mode 1))))

;; auto-complete-clang
;; (require 'auto-complete-clang)

;; (setq ac-auto-start nil)
;; (setq ac-quick-help-delay 0.5)
;; (ac-set-trigger-key "TAB")
;; (define-key ac-mode-map  [(meta /)] 'auto-complete)
;; (define-key ac-mode-map  [(tab)] 'auto-complete)

;; echo "" | g++ -v -x c++ -E -  
;; (setq ac-clang-flags
;;       (mapcar (lambda (item)(concat "-I" item))
;;               (split-string
;;                "
;; /usr/include/c++/4.8
;; /usr/include/x86_64-linux-gnu/c++/4.8
;; /usr/include/c++/4.8/backward
;; /usr/lib/gcc/x86_64-linux-gnu/4.8/include
;; /usr/local/include
;; /usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed
;; /usr/include/x86_64-linux-gnu
;; /usr/include
;; "
;;                )))

;; (defun my-ac-config ()
;;   (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
;;   (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
;;   ;; (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
;;   (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
;;   (add-hook 'css-mode-hook 'ac-css-mode-setup)
;;   (add-hook 'auto-complete-mode-hook 'ac-common-setup)
;;   (global-auto-complete-mode t))
;; (defun my-ac-cc-mode-setup ()
;;   (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
;; (add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
;; (my-ac-config)

;; load ace-jump-mode
(autoload 'ace-jump-mode "ace-jump-mode" "Emacs quick move minor mode" t)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;; load find-file-in-project
(autoload 'find-file-in-project "find-file-in-project" nil t)
(autoload 'find-file-in-project-by-selected "find-file-in-project" nil t)
(autoload 'find-directory-in-project-by-selected "find-file-in-project" nil t)
(autoload 'ffip-show-diff "find-file-in-project" nil t)
(autoload 'ffip-save-ivy-last "find-file-in-project" nil t)
(autoload 'ffip-ivy-resume "find-file-in-project" nil t)

;; Start emacs server
(server-start)
;; ======= End: Load Files ===============================================

;; 
;; Emacs23 for windows 字体设置
;; =======================================================================
;; If you are using Windows 7, just uncomment bellow text.
;; (setq w32-charset-info-alist
;; (cons '("gbk" w32-charset-gb2312 . 936) w32-charset-info-alist))
;; (setq default-frame-alist
;; (append
;; '((font . "fontset-gbk")) default-frame-alist))
;; (create-fontset-from-fontset-spec
;; "-outline-Courier New-normal-r-normal-normal-13-97-96-96-c-*-fontset-gbk")
;; (set-fontset-font
;; "fontset-default" nil
;; "-outline-新宋体-normal-r-normal-*-14-*-96-96-c-*-iso10646-1" nil 'prepend)
;; (set-fontset-font
;; "fontset-gbk" 'kana
;; "-outline-新宋体 -normal-r-normal-*-14-*-96-96-c-*-iso10646-1" nil 'prepend)
;; (set-fontset-font
;; "fontset-gbk" 'han
;; "-outline-新宋体-normal-r-normal-*-14-*-96-96-c-*-iso10646-1" nil 'prepend)
;; (set-fontset-font
;; "fontset-gbk" 'cjk-misc
;; "-outline-新 宋体-normal-r-normal-*-14-*-96-96-c-*-iso10646-1" nil 'prepend)
;; (set-fontset-font
;; "fontset-gbk" 'symbol
;; "-outline-新宋体-normal-r-normal-*-14-*-96-96-c-*-iso10646-1" nil 'prepend)
;; (set-default-font "fontset-gbk")
;; =======================================================================

(add-to-list 'default-frame-alist
	     '(font . "monospace-10"))
(set-fontset-font "fontset-default" 'han '("WenQuanYi Micro Hei" . "unicode-bmp"))

(require 'tramp)
(setq tramp-default-method "scp")
