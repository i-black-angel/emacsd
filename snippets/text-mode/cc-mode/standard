# -*- mode: snippet -*-
# name : command line standard
# key : standard
# --
#include <stdarg.h>
#include <getopt.h>

/* TODO:: modify yourself here */
static char  *g_name     = NULL;
static int    g_verbose  = 0;

/* option specification for getopt_long. */
static const struct option long_options[] = {
    {"help",       no_argument,        NULL, 'h'},
    {"version",    no_argument,        NULL, 'V'},
    {"verbose",    no_argument,        NULL, 'v'},
    {"name",       required_argument,  NULL, 'n'},
    /* terminating NULL placeholder */
    {NULL,         no_argument,        NULL, 0},
};

static void
print_usage (void) {
    printf("Usage: %s [OPTION] ...\n", ${1:PACKAGE});
    printf("${2:Program description}\n");
    printf("\n");
    printf("  -h, --help          Print this help\n");
    printf("  -V, --version       Print version number\n");
    printf("  -v, --verbose       Increase verbosity\n");
    printf("  -n, --name=NAME     Show welcome info for NAME\n");
}

static void
print_version (void) {
    printf("%s (%s) %s\n", $1, ${3:PACKAGE_NAME}, ${4:VERSION});
    printf("Report bugs: %s\n", ${5:PACKAGE_BUGREPORT});
}

/* Fatal error - terminate execution immediately.  Does not return.  */
void
fatal (const char *format, ...)
{
    va_list ap;

    va_start (ap, format);
    fprintf (stderr, "%s: ", $1);
    vfprintf (stderr, format, ap);
    va_end (ap);
    fputc ('\n', stderr);
    exit (EXIT_FAILURE);
}

/* parse the program options using getopt_long... */
static void
parse_program_options (int argc, char **argv) {
    int opt = -1;
    int longind = 0;
    while ((opt = getopt_long(argc, argv, "hVvn:",
                  long_options, &longind)) >= 0) {
        switch (opt) {
        case 'h':
            print_usage();
            exit(EXIT_SUCCESS);
        case 'V':
            print_version();
            exit(EXIT_SUCCESS);
        case 'v':
            ${6:g_verbose = 1;}
            break;
        case 'n':
            if (optarg)
                ${7:g_name = optarg;}
            else
                fatal ("missing name");
            break;
        default:
            fprintf(stderr, "%s: unknow flag '%c'\n", $1, opt);
            printf("\n");
            print_usage();
            printf("\n");
            fatal("unexpected flag");
        }
    }
}